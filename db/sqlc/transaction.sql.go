// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: transaction.sql

package db

import (
	"context"
	"database/sql"
)

const createTransaction = `-- name: CreateTransaction :one
INSERT INTO Transaction (reciever_id, sender_id, currency, amount, message, deadline, status)
VALUES ($1, $2, $3, $4, $5, $6, $7) RETURNING id, reciever_id, sender_id, amount, status, currency, message, deadline, created_at
`

type CreateTransactionParams struct {
	RecieverID int64
	SenderID   int64
	Currency   string
	Amount     int64
	Message    sql.NullString
	Deadline   sql.NullTime
	Status     string
}

func (q *Queries) CreateTransaction(ctx context.Context, arg CreateTransactionParams) (Transaction, error) {
	row := q.db.QueryRowContext(ctx, createTransaction,
		arg.RecieverID,
		arg.SenderID,
		arg.Currency,
		arg.Amount,
		arg.Message,
		arg.Deadline,
		arg.Status,
	)
	var i Transaction
	err := row.Scan(
		&i.ID,
		&i.RecieverID,
		&i.SenderID,
		&i.Amount,
		&i.Status,
		&i.Currency,
		&i.Message,
		&i.Deadline,
		&i.CreatedAt,
	)
	return i, err
}

const deleteTransaction = `-- name: DeleteTransaction :exec
DELETE FROM Transaction WHERE id = $1
`

func (q *Queries) DeleteTransaction(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteTransaction, id)
	return err
}

const getAllDebtFromAccountId = `-- name: GetAllDebtFromAccountId :many
SELECT id, reciever_id, sender_id, amount, status, currency, message, deadline, created_at FROM Transaction WHERE reciever_id = $1 AND sender_id=$2 AND status = "accepted"
`

type GetAllDebtFromAccountIdParams struct {
	RecieverID int64
	SenderID   int64
}

func (q *Queries) GetAllDebtFromAccountId(ctx context.Context, arg GetAllDebtFromAccountIdParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getAllDebtFromAccountId, arg.RecieverID, arg.SenderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.RecieverID,
			&i.SenderID,
			&i.Amount,
			&i.Status,
			&i.Currency,
			&i.Message,
			&i.Deadline,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllDebtTransactions = `-- name: GetAllDebtTransactions :many
SELECT id, reciever_id, sender_id, amount, status, currency, message, deadline, created_at FROM Transaction WHERE reciever_id = $1 AND status = "accepted"
`

func (q *Queries) GetAllDebtTransactions(ctx context.Context, recieverID int64) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getAllDebtTransactions, recieverID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.RecieverID,
			&i.SenderID,
			&i.Amount,
			&i.Status,
			&i.Currency,
			&i.Message,
			&i.Deadline,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllLendFromAccountId = `-- name: GetAllLendFromAccountId :many
SELECT id, reciever_id, sender_id, amount, status, currency, message, deadline, created_at FROM Transaction WHERE sender_id = $1 AND reciever_id=$2 AND status = "accepted"
`

type GetAllLendFromAccountIdParams struct {
	SenderID   int64
	RecieverID int64
}

func (q *Queries) GetAllLendFromAccountId(ctx context.Context, arg GetAllLendFromAccountIdParams) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getAllLendFromAccountId, arg.SenderID, arg.RecieverID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.RecieverID,
			&i.SenderID,
			&i.Amount,
			&i.Status,
			&i.Currency,
			&i.Message,
			&i.Deadline,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllLendTransactions = `-- name: GetAllLendTransactions :many
SELECT id, reciever_id, sender_id, amount, status, currency, message, deadline, created_at FROM Transaction WHERE sender_id = $1 AND status = "accepted"
`

func (q *Queries) GetAllLendTransactions(ctx context.Context, senderID int64) ([]Transaction, error) {
	rows, err := q.db.QueryContext(ctx, getAllLendTransactions, senderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Transaction
	for rows.Next() {
		var i Transaction
		if err := rows.Scan(
			&i.ID,
			&i.RecieverID,
			&i.SenderID,
			&i.Amount,
			&i.Status,
			&i.Currency,
			&i.Message,
			&i.Deadline,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDeadline = `-- name: UpdateDeadline :exec
UPDATE Transaction SET deadline = $2 WHERE id = $1
`

type UpdateDeadlineParams struct {
	ID       int64
	Deadline sql.NullTime
}

func (q *Queries) UpdateDeadline(ctx context.Context, arg UpdateDeadlineParams) error {
	_, err := q.db.ExecContext(ctx, updateDeadline, arg.ID, arg.Deadline)
	return err
}

const updateTransactionAmount = `-- name: UpdateTransactionAmount :exec
UPDATE Transaction SET amount = $2 WHERE id = $1
`

type UpdateTransactionAmountParams struct {
	ID     int64
	Amount int64
}

func (q *Queries) UpdateTransactionAmount(ctx context.Context, arg UpdateTransactionAmountParams) error {
	_, err := q.db.ExecContext(ctx, updateTransactionAmount, arg.ID, arg.Amount)
	return err
}

const updateTransactionStatus = `-- name: UpdateTransactionStatus :exec
UPDATE Transaction SET status = $2 WHERE id = $1
`

type UpdateTransactionStatusParams struct {
	ID     int64
	Status string
}

func (q *Queries) UpdateTransactionStatus(ctx context.Context, arg UpdateTransactionStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateTransactionStatus, arg.ID, arg.Status)
	return err
}
